/*** ...* @author Default* @version 0.1*/package com.xmlphotoalbum{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;		import flash.events.Event;	import flash.events.IEventDispatcher;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.net.URLRequest;	import flash.text.*;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.utils.Timer;	import flash.events.TimerEvent;	import caurina.transitions.Tweener;	import flash.events.*;	import flash.net.*;	import flash.display.Shape;	import flash.display.LineScaleMode;	import flash.display.CapsStyle;	import flash.display.JointStyle;		import flash.display.StageScaleMode;	public class SlideShow extends MovieClip {				private var PauseFlag:Boolean = false;		private var ProgressBox:Sprite = new Sprite();		private var ProgressText:TextField= new TextField();		private var NavigationButtons:Sprite = new Sprite();		private var nextBtn:DrawNavigationButtons = new DrawNavigationButtons(30, 30, 0x000000, 0.6);		private var previousBtn:DrawNavigationButtons = new DrawNavigationButtons(30, 30, 0x000000, 0.6);		public var backgroundRect:Shape;		public var backgroundTransparency:Number;		public var strokeColor:uint;		public var backgroundStrokeSize:uint;		public var backgroundColor:uint;		private var progressText:TextField= new TextField();		public var format:TextFormat  = new TextFormat();		private var progressRect:Shape;		private var CaptionBox:Sprite = new Sprite();		private var progressBox:Sprite = new Sprite();		private var captionFlag:Boolean = false;		private var backgroundWidth:Number;		private var backgroundHeight:Number;		public var ImageWidth:Number;		public var ImageHeight:Number;		public var PhotoLink:String;		private var initializeSlide:Number = 0;		private var albumID:Number = 0;				private var slideTextKey:Number = 0;		private var timer:Timer;		private var slideBitmap:Bitmap;		private var tempPhotoIndex:Number = 0;		private var slideMovieClipA:MovieClip;		private var slideMovieClipB:MovieClip;		public var slideBitmapA:Bitmap;		private var difX:Number;		private var difY:Number;		private var available:Boolean;		private var SlideXMLPath:String;		private var SlideXML:XML = new XML();		private var slideFlag:Boolean = true;		private var transitionTime:Number;		private var myT:Thumbs;		private var myAlbums:Albums;				private var noofRowsThumbs:Number;		private var noofColumnsThumbs:Number;				private var folderName:String;		private var slideURLString:String;				private var PercentText:TextField = new TextField();		private var loaderAnimation:CircleSlicePreloader;			function SlideShow(_folderName:String,_slideURL:String,_backgroundWidth:Number, _backgroundHeight:Number):void {			folderName = _folderName;			slideURLString = _slideURL;			backgroundWidth = _backgroundWidth;			backgroundHeight = _backgroundHeight;			this.playSlideShow();		}				private function playSlideShow():void{									var slideURL:URLRequest = new URLRequest(slideURLString);			var slideLoader = new Loader();			configureListenersSlide(slideLoader.contentLoaderInfo);			slideLoader.load(slideURL);			var txt_fmt:TextFormat = new TextFormat();			txt_fmt.font= "Tahoma";			txt_fmt.size=11;			txt_fmt.color = 0x666666;			//PercentText.background = true;			//PercentText.backgroundColor = 0x000000;			PercentText.autoSize = TextFieldAutoSize.LEFT;			PercentText.defaultTextFormat=txt_fmt;			loaderAnimation = new CircleSlicePreloader(backgroundWidth / 2, backgroundHeight / 2, 60, 17);			this.addChild(PercentText);			this.addChild(loaderAnimation);								}				private function configureListenersSlide(dispatcher:IEventDispatcher):void {			dispatcher.addEventListener(Event.COMPLETE,putSlideImage);			dispatcher.addEventListener(ProgressEvent.PROGRESS, showProgress);					}				private function showProgress(event:ProgressEvent):void {									var percent:Number = Math.round((event.bytesLoaded / event.bytesTotal )*100 );			PercentText.text = "% " + percent + "";			PercentText.x = stage.stageWidth / 2 - PercentText.textWidth + 12;			PercentText.y = stage.stageHeight / 2 - PercentText.textHeight + 5;											}				private function putSlideImage(event:Event):void {							dispatchEvent(new Event("image loaded"));								this.removeChild(PercentText);												var scaleN:Number;							slideMovieClipA = new MovieClip();				this.addChild(slideMovieClipA);				slideBitmapA = new Bitmap();				slideBitmapA.cacheAsBitmap = true;				slideBitmapA = Bitmap(event.target.content);				slideBitmapA.smoothing = true;				ImageWidth = slideBitmapA.width;				ImageHeight = slideBitmapA.height;				scaleN = this.scaling();							///////////////////SCALING FOR IMAGE A				var imageWidth:Number = (slideBitmapA.width / scaleN)-backgroundStrokeSize;				var imageHeight:Number = (slideBitmapA.height / scaleN)-backgroundStrokeSize;				slideBitmapA.width = imageWidth;				slideBitmapA.height = imageHeight;				////////////////////////////////////////////				slideMovieClipA.x = (backgroundWidth-slideBitmapA.width)/2;				slideMovieClipA.y = (backgroundHeight-slideBitmapA.height)/2;				slideMovieClipA.addChild(slideBitmapA);				slideFlag = false;										}		private function scaling():Number {			var widthRatio:Number = ImageWidth/backgroundWidth;			var heightRatio:Number = ImageHeight/backgroundHeight;			var scalingRatio:Number;			if (widthRatio == Math.max(widthRatio,heightRatio)) {				scalingRatio = widthRatio;			} else {				scalingRatio = heightRatio;			}			return scalingRatio;		}		public function slideDispose():void {			slideBitmapA.bitmapData.dispose();		}					private function captionCall(event:MouseEvent):void {			Tweener.addTween(CaptionBox, {x:0, time:transitionTime});			captionFlag = true;		}		private function captionLeave(event:MouseEvent):void {			Tweener.addTween(nextBtn, {time:3,alpha:0 });			Tweener.addTween(previousBtn, {time:3,alpha:0 });			Tweener.addTween(CaptionBox, {time:transitionTime,x: -progressText.width-5});			captionFlag = false;		}		///////////////////////////////////////////////////////////NAVIGATION MENU////////////////////////////////////////////////////////////		//////////////////////////////////////////NExt & Previous Buttons --- NavigationButtons Sprite//////////////////////////////////////////////////////////////////////////////		private function navigationBtnCall(event:MouseEvent):void {			previousBtn.x = 30 + backgroundStrokeSize;			previousBtn.y = backgroundHeight/2- nextBtn.height/2;			nextBtn.x = backgroundWidth-30-backgroundStrokeSize;			nextBtn.y = backgroundHeight/2 - nextBtn.height/2;			Tweener.addTween(nextBtn, {time:2,alpha:1 });			Tweener.addTween(previousBtn, {time:2,alpha:1 });			nextBtn.addEventListener(MouseEvent.CLICK, NextImage);			previousBtn.addEventListener(MouseEvent.CLICK, PrevImage);		}		private function NextImage(event:MouseEvent):void {						timer.stop();			PauseFlag = true;			initializeSlide++;			initializeSlide = initializeSlide % SlideXML.album[albumID].image.length();						progressText.text = SlideXML.album[albumID].image[initializeSlide].attribute("caption");			progressBox.width = 5+progressText.width;			if (captionFlag) {				//////////////////////////////////////////Caption Movements////////////////////////////////////////////////////////////////				CaptionBox.x = -progressText.width-5;				Tweener.addTween(CaptionBox, {time:transitionTime,x:0});			} else {				CaptionBox.x = -progressText.width-5;			}		}		private function PrevImage(event:MouseEvent):void {			timer.stop();			PauseFlag = true;			initializeSlide--;			if (initializeSlide<0) {				initializeSlide = SlideXML.album[albumID].image.length() - initializeSlide-2;			}						progressText.text = SlideXML.album[albumID].image[initializeSlide].attribute("caption");			progressBox.width = 5+progressText.width;			if (captionFlag) {				//////////////////////////////////////////Caption Movements////////////////////////////////////////////////////////////////				CaptionBox.x = -progressText.width-5;				Tweener.addTween(CaptionBox, {time:transitionTime, x:0 });			} else {				CaptionBox.x = -progressText.width-5;			}		}			private function CreateAlbums(event:MouseEvent):void {			timer.stop();			PauseFlag = true;						myAlbums = new Albums(SlideXML,backgroundWidth,backgroundHeight,noofColumnsThumbs,noofRowsThumbs,0xff0000);			myAlbums.y = - backgroundHeight;			Tweener.addTween(myAlbums, {time:2, y:0, transition:"easeOutElastic", onStart:hideAway });			this.addChild(myAlbums);			myAlbums.addEventListener("showAlbum",showAlbum);					}						private function CreateThumbs(event:MouseEvent):void {			timer.stop();			PauseFlag = true;			ProgressText.text = "CREATING THUMBNAILS";			this.addChild(ProgressText);			ProgressText.x = 0.5*(backgroundWidth-ProgressText.width);			ProgressText.y = -100;			Tweener.addTween(ProgressText, {time:1, y:backgroundHeight/2, transition:"easeInOutElastic" });			myT = new Thumbs("children",albumID,backgroundWidth,backgroundHeight);			trace(folderName);			myT.y=-backgroundHeight;			Tweener.addTween(myT, {time:2, y:0, transition:"easeOutElastic", onStart:hideAway });			this.addChild(myT);			myT.addEventListener("showSlide",showSlide);		}		private function hideAway():void {			this.removeChild(ProgressText);		}		private function showSlide(event:Event):void {						if(PauseFlag==true){			timer.start();			}			PauseFlag = false;			initializeSlide = event.target.imageID;			playSlideShow();			this.removeChild(myT);					}		private function showAlbum(event:Event):void {			if(PauseFlag==true){			timer.start();			}			PauseFlag = false;			initializeSlide = 0;			albumID = event.target.xmlID;			playSlideShow();			this.removeChild(myAlbums);					}	}}