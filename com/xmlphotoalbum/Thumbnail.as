package com.xmlphotoalbum{	import flash.display.Sprite;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.events.MouseEvent;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.IEventDispatcher;	import flash.events.IOErrorEvent;	import flash.text.*;		import flash.display.Shape;	import flash.display.LineScaleMode;    import flash.display.CapsStyle;    import flash.display.JointStyle;		import flash.display.Bitmap;    import flash.display.BitmapData;		import caurina.transitions.Tweener;	public class Thumbnail extends Sprite {		public var url:String;		private var loader:Loader;		private var urlRequest:URLRequest;		public var thumbWidth:Number;		public var thumbHeight:Number;		public var tWidth:Number;		public var tHeight:Number;		public var xmlID:Number;		public var thumbMargin:Number = 4;		private var mediatype:String;				public var backgroundRect:Shape;		public var backgroundTransparency:Number = 0.4;		public var strokeColor:uint = 0x000000;		public var backgroundStrokeSize:uint = 0x000000;		public var backgroundColor:uint;		private var backGround:Boolean;				private var backgroundWidth:Number;		private var backgroundHeight:Number;		private var textMargin:Number = 2;		function Thumbnail(_folderName:String, _list:String, _thumbWidth:Number, _thumbHeight:Number, _xmlID:Number, _backGround:Boolean, _backgroundColor:uint):void {									var slashIndex:Number = 1+(_list.indexOf("/"));			var _listLength:Number = _list.length - slashIndex;			_list = _list.substr(slashIndex,_listLength);						url="media/"+_folderName+"/thumbnails/"+_list;						thumbWidth = _thumbWidth;			thumbHeight = _thumbHeight;			backgroundWidth = _thumbWidth;			backgroundHeight = _thumbHeight;			xmlID = _xmlID;			backgroundColor = _backgroundColor;						backGround = _backGround;						var medianame:String = _list;			var index:uint = medianame.indexOf(".")+1;			var medianameLength:uint = medianame.length;			var endIndex:uint = medianameLength;			var mediatype:String = medianame.substring(index,endIndex);			switch (mediatype) {				case "jpg" :					this.drawLoader();					break;				case "flv" :					this.loadFLVImg();					break;				case "mp3" :					this.loadSoundImg();					break;				default :					trace("Not supported");			}		}		private function drawLoader():void {			urlRequest=new URLRequest(url);			loader=new Loader  ;			configureListeners(loader.contentLoaderInfo);			loader.mouseEnabled=false;			loader.load(urlRequest);		}				private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, loadImage);			dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			        }			  private function ioErrorHandler(event:IOErrorEvent):void {			this.drawBackground(backgroundColor);		  	var format:TextFormat  = new TextFormat();			format.font =  "Tahoma";			format.color = 0xFFFFFF;			format.size = 9;						var ThumbnailText:TextField= new TextField();			ThumbnailText.wordWrap = true;			ThumbnailText.background = true;			ThumbnailText.backgroundColor = 0x000000;			ThumbnailText.autoSize = TextFieldAutoSize.LEFT;			ThumbnailText.defaultTextFormat = format;			ThumbnailText.text = "Media not supported";			ThumbnailText.selectable = false;			ThumbnailText.x = textMargin;			ThumbnailText.y = textMargin;						this.addChild(ThumbnailText);        }				private function loadFLVImg():void {			this.drawBackground(backgroundColor);		  	var format:TextFormat  = new TextFormat();			format.font =  "Tahoma";			format.color = 0xFFFFFF;			format.size = 9;						var ThumbnailText:TextField= new TextField();			ThumbnailText.wordWrap = true;			ThumbnailText.background = true;			ThumbnailText.backgroundColor = 0x000000;			ThumbnailText.autoSize = TextFieldAutoSize.LEFT;			ThumbnailText.defaultTextFormat = format;			ThumbnailText.width = backgroundWidth-textMargin;			ThumbnailText.height = backgroundHeight-2*textMargin;			ThumbnailText.text = "FLV Video Content";			ThumbnailText.selectable = false;			this.addChild(ThumbnailText);			this.buttonMode = true;			            var playSprite:Sprite = new Sprite();			var playShape:Shape = new Shape();			playShape.graphics.beginFill(0xffffff,1);			playShape.graphics.moveTo(8,7);			playShape.graphics.lineTo(14,10);			playShape.graphics.lineTo(8,14);			playShape.graphics.lineTo(8,8);			playShape.graphics.endFill();						var playShapeBack:Shape = new Shape();			playShapeBack.graphics.lineStyle(0.1, 0xffffff,0.9, true, LineScaleMode.NORMAL, CapsStyle.SQUARE, JointStyle.MITER);			playShapeBack.graphics.beginFill(0x00000,1);			playShapeBack.graphics.drawRect(0,0,21,21);			playShapeBack.graphics.endFill();						playSprite.addChild(playShapeBack);			playSprite.addChild(playShape);			this.addChild(playSprite);			var scaleDown:Number = Math.min(backgroundWidth,backgroundHeight);			playSprite.width = playSprite.height = 0.2 * scaleDown;			playSprite.x = 0.5*(backgroundWidth-playSprite.width);			playSprite.y = 0.5*(backgroundHeight-playSprite.height);									this.mouseChildren = false;			this.addEventListener(MouseEvent.MOUSE_OVER,mOver);			this.addEventListener(MouseEvent.MOUSE_OUT,mOut);			this.addEventListener(MouseEvent.CLICK,dispatcher);        }				private function loadSoundImg():void {			this.drawBackground(backgroundColor);		  	var format:TextFormat  = new TextFormat();			format.font =  "Tahoma";			format.color = 0xFFFFFF;			format.size = 9;						var ThumbnailText:TextField= new TextField();			ThumbnailText.wordWrap = true;			ThumbnailText.background = true;			ThumbnailText.backgroundColor = 0x000000;			ThumbnailText.autoSize = TextFieldAutoSize.LEFT;			ThumbnailText.defaultTextFormat = format;			ThumbnailText.width = backgroundWidth-textMargin;			ThumbnailText.height = backgroundHeight-2*textMargin;			ThumbnailText.text = "Audio Content";			ThumbnailText.selectable = false;			this.addChild(ThumbnailText);			this.buttonMode = true;			            var playSprite:Sprite = new Sprite();			var playShape:Shape = new Shape();			playShape.graphics.beginFill(0xffffff,1);			playShape.graphics.moveTo(8,7);			playShape.graphics.lineTo(14,10);			playShape.graphics.lineTo(8,14);			playShape.graphics.lineTo(8,8);			playShape.graphics.endFill();						var playShapeBack:Shape = new Shape();			playShapeBack.graphics.lineStyle(0.1, 0xffffff,0.9, true, LineScaleMode.NORMAL, CapsStyle.SQUARE, JointStyle.MITER);			playShapeBack.graphics.beginFill(0x00000,1);			playShapeBack.graphics.drawRect(0,0,21,21);			playShapeBack.graphics.endFill();						playSprite.addChild(playShapeBack);			playSprite.addChild(playShape);			this.addChild(playSprite);			var scaleDown:Number = Math.min(backgroundWidth,backgroundHeight);			playSprite.width = playSprite.height = 0.2 * scaleDown;			playSprite.x = 0.5*(backgroundWidth-playSprite.width);			playSprite.y = 0.5*(backgroundHeight-playSprite.height);									this.mouseChildren = false;			this.addEventListener(MouseEvent.MOUSE_OVER,mOver);			this.addEventListener(MouseEvent.MOUSE_OUT,mOut);			this.addEventListener(MouseEvent.CLICK,dispatcher);        }				private function loadImage(event:Event):void{						this.drawBackground(backgroundColor);			this.alpha = 0.8;			tWidth = loader.width;			tHeight = loader.height;						this.addChild(loader);												var scaleRatioX:Number = (thumbWidth - 2 * thumbMargin) / tWidth;			var scaleRatioY:Number = (thumbHeight - 2 * thumbMargin) / tHeight;			var scaleRatio:Number;						if (scaleRatioX == Math.max(scaleRatioX,scaleRatioY)) {				scaleRatio = scaleRatioY;							} else {				scaleRatio = scaleRatioX;							}						loader.scaleX = loader.scaleY = scaleRatio;			this.buttonMode = true;						var horizontalMargin:Number = 0.5 * (backgroundWidth - loader.width);			var verticalMargin:Number = 0.5 * (backgroundHeight - loader.height);						loader.x = horizontalMargin;			loader.y = verticalMargin;						this.addEventListener(MouseEvent.MOUSE_OVER,mOver);			this.addEventListener(MouseEvent.MOUSE_OUT,mOut);			this.addEventListener(MouseEvent.CLICK,dispatcher);					}								private function mOver(event:MouseEvent):void{									Tweener.addTween(event.target,{alpha:1,time:1});					}				private function mOut(event:MouseEvent):void{						Tweener.addTween(event.target,{alpha:0.7,time:1});					}				private function dispatcher(event:MouseEvent):void{						dispatchEvent(new Event("clicked"));					}				private function drawBackground(_backgroundColor:uint):void {			if(backGround){			backgroundRect = new Shape();						backgroundRect.graphics.beginFill(_backgroundColor,backgroundTransparency);			backgroundRect.graphics.lineStyle(backgroundStrokeSize, strokeColor, 1, false, LineScaleMode.VERTICAL,CapsStyle.NONE, JointStyle.MITER, 10);						backgroundRect.graphics.drawRect(0, 0, backgroundWidth, backgroundHeight);			backgroundRect.graphics.endFill();			this.addChild(backgroundRect);			}		}			}}