package com.xmlphotoalbum{	import flash.display.Sprite;	import flash.events.*;	import flash.media.Video;	import flash.net.*;	import flash.display.Graphics;	import flash.display.Shape;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.media.SoundTransform;	import flash.media.SoundChannel;	public class Videoplayer extends Sprite {		private var videoWidth:Number = 0;		private var videoHeight:Number = 0;		private var playerWidth:Number = 480;		private var playerHeight:Number = 300;		private var video:Video;		public var ns:NetStream;		private var nc:NetConnection = new NetConnection();		private var meta:Object = new Object();		private var size:uint         = 14;		private var bgColor:uint      = 0xCCCCCC;		private var iconColor:uint    = 0x000000;		private var borderColor:uint  = 0x000000;		private var borderSize:uint   = 0;		private var cornerRadius:uint = 9;		private var gutter:uint       = 5;		private var rolling:Boolean = false;		private var navigationBar:Sprite = new Sprite();		private var pause_btn:Sprite = new Sprite();		private var resume_btn:Sprite = new Sprite();		private var minutesRolled:Number;		private var secondsRolled:Number;		private var textBox:TextField;		private var textBoxText:String = "00:00";		private var totalDuration:Number;		private var scrub:Sprite = new Sprite();		private var scrubLoaded:Sprite = new Sprite();		private var scrubPos:Number;		private var _volume:Number;		private var _volumeTransform:SoundTransform = new SoundTransform();		private var channel:SoundChannel;		private var volumeBarAll:Sprite;		private var volumeBarSprite:Sprite;		private var volumeBarMask:Sprite;		private var volumeState:Shape;		private var firstBarSprite:Sprite;		private var secondBarSprite:Sprite;		private var thirdBarSprite:Sprite;		private var fourthBarSprite:Sprite;		private var fifthBarSprite:Sprite;		private var sixthBarSprite:Sprite;		private var seventhBarSprite:Sprite;		private var eightBarSprite:Sprite;		private var firstBarSelected:Boolean = false;		private var secondBarSelected:Boolean = false;		private var videoURL:String;		private var mute:Number = 0;		private var speakerSprite:Sprite = new Sprite();		private var percVol:Number;				function Videoplayer(_videoURL:String):void {			videoURL = _videoURL;						//////						this.addEventListener(Event.ENTER_FRAME,rollTime);			nc.addEventListener(NetStatusEvent.NET_STATUS, onStatusEvent);			nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			nc.connect(null);		}				private function onStatusEvent(event:Object):void {									//handles NetConnection and NetStream status events			switch (event.info.code) {				case "NetConnection.Connect.Success":					//play stream if connection successful					connectStream();					break;				case "NetStream.Play.StreamNotFound":					//error if stream file not found in					//location specified					//trace("Stream not found: " + _videoURL);					break;				case "NetStream.Play.Stop":					//do if video is stopped					//videoPlayComplete();					break;			}			//trace(event.info.code);		}				private function connectStream():void {			//netstream object			ns = new NetStream(nc);			ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR,asyncErrorHandler);			ns.addEventListener(NetStatusEvent.NET_STATUS,onStatusEvent);			//other event handlers assigned 			//to the netstream client property			var meta:Object = new Object();			meta.onMetaData = onMetaDataHandler;			meta.onCuePoint = onCuePointHandler;			meta.onPlayStatus = playStatus;			ns.client = meta;						//attach netstream to the video object			video = new Video(0,0);			video.attachNetStream(ns);			_volumeTransform.volume = 1;			ns.soundTransform = _volumeTransform;			//video position could be parameterized but hardcoded			//here to account for optional movie frame border			this.buttonsBackground();			this.pausebutton();			this.resumebutton();			this.scrubber();			this.rollingText();			addChild(video);						setVideoInit(videoURL);		}				/* -----------------Information handlers---------------- */		private function onMetaDataHandler(metaInfoObj:Object):void {			video.width = metaInfoObj.width;			videoWidth = metaInfoObj.width;			video.height = metaInfoObj.height;			videoHeight = metaInfoObj.height;			totalDuration = metaInfoObj.duration;						video.x = (playerWidth - videoWidth) * 0.5;			video.y = (playerHeight - videoHeight) * 0.5;			//trace("metadata: duration=" + metaInfoObj.duration + 				//"width=" + metaInfoObj.width + " height=" +				//metaInfoObj.height + " framerate=" +				//metaInfoObj.framerate);					}		private function onCuePointHandler(cueInfoObj:Object):void {			//trace("cuepoint: time=" + cueInfoObj.time + " name=" + 				//cueInfoObj.name + " type=" + cueInfoObj.type);		}				private function playStatus(event:Object):void {			//handles onPlayStatus complete event if available			switch (event.info.code) {				case "NetStream.Play.Complete":					//do if video play completes					videoPlayComplete();					break;			}			//trace(event.info.code);		}				/* -------------NetStream actions and events-------------- */		private function videoPlayComplete():void {			//setVideoInit();		}				public function setVideoInit(_videoURL:String):void {			ns.play(_videoURL);			ns.pause();			ns.seek(0);					}				public function nextVideoInit(_videoURL:String):void {			this.resumeThing(null);			ns.play(_videoURL);			ns.seek(0);					}				/* -----------------------Error handlers------------------------ */		private function securityErrorHandler(event:SecurityErrorEvent):void {			trace("securityErrorHandler: " + event);		}				private function asyncErrorHandler(event:AsyncErrorEvent):void {			trace(event.text);		}		private function resumeThing(event:MouseEvent):void {			resume_btn.visible = false;			pause_btn.visible = true;			ns.togglePause();			rolling = true;						scrubLoaded.addEventListener(MouseEvent.CLICK,scrubOver);			scrubLoaded.buttonMode = true;		}		private function pauseThing(event:MouseEvent):void {			resume_btn.visible = true;			pause_btn.visible = false;			scrubPos = ns.time;			ns.togglePause();						rolling = false;		}		////////////////		///Interface Design		private function buttonsBackground():void {			this.addChild(navigationBar);			navigationBar.x = 0;			navigationBar.y = playerHeight + 1;			var playerBack:Shape = new Shape();			playerBack.graphics.beginFill(0x000000,1);			playerBack.graphics.drawRect(0, 0, playerWidth, playerHeight);			playerBack.graphics.endFill();			this.addChild(playerBack);						var buttonsBack:Shape = new Shape();			buttonsBack.graphics.beginFill(bgColor,0.5);			buttonsBack.graphics.drawRect(0, 0, playerWidth, size);			buttonsBack.graphics.endFill();			navigationBar.addChild(buttonsBack);		}		private function rollingText():void {			textBox = new TextField();			textBox.autoSize = TextFieldAutoSize.LEFT;			textBox.selectable = false;			var format:TextFormat = new TextFormat();			format.font = "Verdana";			format.color = 0x000000;			format.size = 8;			textBox.defaultTextFormat = format;			textBox.x = playerWidth - 30;			textBox.y = -1;			navigationBar.addChild(textBox);			textBox.text = textBoxText;		}		private function pausebutton():void {						navigationBar.addChild(pause_btn);			pause_btn.addEventListener(MouseEvent.CLICK, pauseThing);			pause_btn.buttonMode = true;						pause_btn.x = 1;			pause_btn.y = 1;			var buttonBackIcon:Shape = new Shape();			buttonBackIcon.graphics.beginFill(bgColor);			buttonBackIcon.graphics.lineStyle(borderSize, borderColor);			buttonBackIcon.graphics.drawRect(0, 0, size, size);			buttonBackIcon.graphics.endFill();			pause_btn.addChild(buttonBackIcon);			var playIcon:Shape = new Shape();			playIcon.graphics.beginFill(iconColor);			playIcon.graphics.drawRect(5, 5, 2, 5);			playIcon.graphics.endFill();			playIcon.graphics.beginFill(iconColor);			playIcon.graphics.drawRect(8, 5, 2, 5);			playIcon.graphics.endFill();			pause_btn.scaleX = pause_btn.scaleY = 0.8;						pause_btn.addChild(playIcon);		}		private function resumebutton():void {						navigationBar.addChild(resume_btn);			resume_btn.addEventListener(MouseEvent.CLICK, resumeThing);			resume_btn.buttonMode = true;			resume_btn.x = 1;			resume_btn.y = 1;			var buttonBackIcon:Shape = new Shape();			buttonBackIcon.graphics.beginFill(bgColor);			buttonBackIcon.graphics.lineStyle(borderSize, borderColor);			buttonBackIcon.graphics.drawRect(0, 0, size, size);			buttonBackIcon.graphics.endFill();			resume_btn.addChild(buttonBackIcon);			var resumeIcon:Shape = new Shape();			resumeIcon.graphics.beginFill(iconColor);			//resumeIcon.graphics.lineStyle(borderSize, borderColor);			resumeIcon.graphics.moveTo(5,4);			resumeIcon.graphics.lineTo(11,7.5);			resumeIcon.graphics.lineTo(5,11);			resumeIcon.graphics.lineTo(5,4);			resumeIcon.graphics.endFill();			resume_btn.scaleX = resume_btn.scaleY = 0.8;						resume_btn.addChild(resumeIcon);		}				private function volumebar():void {						var speakerIcon:Shape = new Shape();			speakerIcon.graphics.beginFill(0x000000);			speakerIcon.graphics.lineTo(3,0);			speakerIcon.graphics.lineTo(5,-2);			speakerIcon.graphics.lineTo(6,-2);			speakerIcon.graphics.lineTo(6,6);			speakerIcon.graphics.lineTo(5,6);			speakerIcon.graphics.lineTo(3,4);			speakerIcon.graphics.lineTo(0,4);			speakerIcon.graphics.lineTo(0,0);			speakerIcon.graphics.endFill();			navigationBar.addChild(speakerSprite);			speakerSprite.addChild(speakerIcon);			speakerIcon.scaleX = speakerIcon.scaleY = 0.8;			speakerSprite.addEventListener(MouseEvent.CLICK,muteSound);			speakerSprite.buttonMode = true;						volumeBarAll = new Sprite();			navigationBar.addChild(volumeBarAll);			var volumeBarAllBackground:Sprite = new Sprite();			volumeBarAll.x = 13 + scrub.x + scrub.width;			volumeBarAll.y = 7;						speakerIcon.x = volumeBarAll.x - 7;			speakerIcon.y = volumeBarAll.y -2;						var backgroundBar:Shape = new Shape();			backgroundBar.graphics.beginFill(0xee0000,0);			backgroundBar.graphics.drawRect(0, -4, 19, 8);			backgroundBar.graphics.endFill();			volumeBarAll.addChild(backgroundBar);			volumeBarAll.addChild(volumeBarAllBackground);			volumeBarAll.buttonMode = true;						volumeBarSprite = new Sprite();			volumeBarAll.addChild(volumeBarSprite);			volumeBarAll.addEventListener(MouseEvent.CLICK,changeVolume);									var completeBar:Shape = new Shape();			completeBar.graphics.beginFill(iconColor,1);			completeBar.graphics.drawRect(0, -4, 19, 8);			completeBar.graphics.endFill();			volumeBarSprite.addChild(completeBar);						var barsBack:Shape = new Shape();			for(var i:Number = 0;i<10;i++){			barsBack.graphics.beginFill(iconColor,0.3);			barsBack.graphics.drawRect(i*2, -0.4 *i, 0.5, 0.8*i);			barsBack.graphics.endFill();			}			volumeBarAllBackground.addChild(barsBack);						volumeBarMask = new Sprite();			volumeBarAll.addChild(volumeBarMask);			var barsMask:Shape = new Shape();			for(var k:Number = 0;k<10;k++){			barsMask.graphics.beginFill(iconColor,0.7);			barsMask.graphics.drawRect(k*2, -0.4 *k, 0.5, 0.8*k);			barsMask.graphics.endFill();			}			volumeBarMask.addChild(barsMask);						volumeBarSprite.mask = volumeBarMask;					}						private function changeVolume(event:MouseEvent):void{						var mousePos:Number = volumeBarAll.mouseX;			var barWidth:Number = volumeBarAll.width;			percVol = mousePos / barWidth;			volumeBarSprite.scaleX = percVol;			percVol = Math.floor(percVol * 10);			_volumeTransform.volume = percVol * 0.1;			ns.soundTransform = _volumeTransform;			speakerSprite.alpha = 1;			mute = 0;		}				private function muteSound(event:MouseEvent):void{						_volumeTransform.volume = mute * percVol * 0.1;			event.target.alpha = 0.5 + 0.5 * mute;			ns.soundTransform = _volumeTransform;			mute++;			mute = mute % 2;					}						private function scrubber():void {			var scrubBack:Shape = new Shape();			scrubBack.graphics.beginFill(0x666666,0.2);			scrubBack.graphics.drawRect(0, 0, playerWidth - 6 * size, 4.5);			scrubBack.graphics.endFill();			navigationBar.addChild(scrubLoaded);			scrubLoaded.x = size + 3;			scrubLoaded.y = 4;			scrubLoaded.visible = true;			scrubLoaded.addChild(scrubBack);						var scrubFront:Shape  = new Shape();			scrubFront.graphics.beginFill(0x666666,1);			scrubFront.graphics.drawRect(0, 0, playerWidth - 6 * size, 4.5);			scrubFront.graphics.endFill();			navigationBar.addChild(scrub);			scrub.addEventListener(MouseEvent.CLICK,scrubOver);			scrub.buttonMode = true;						scrub.x = size + 3;			scrub.y = 4;			scrub.addChild(scrubFront);			this.volumebar();					}		private function scrubOver(event:MouseEvent):void {			var startX:Number = this.mouseX - event.target.x;			var endX:Number = event.target.width;			var seekTime:Number = totalDuration*(startX/endX);			scrubPos = seekTime;			ns.seek(seekTime);		}		private function rollTime(event:Event):void {			var percentage:Number = ns.time/totalDuration;						var percentageLoaded:Number = ns.bytesLoaded/ns.bytesTotal;			scrubLoaded.scaleX = percentageLoaded;			scrub.scaleX = 0;			if(percentage>0){			scrub.scaleX = percentage;			}			if (Math.floor(percentage)) {				ns.pause();				ns.seek(0);				navigationBar.removeChild(pause_btn);				this.resumebutton();				if (rolling) {					ns.pause();					//ns.seek(100);				}				rolling = false;			}			//ns.bufferLength = 10;			minutesRolled = Math.floor(ns.time / 60);			secondsRolled = Math.floor(ns.time % 60);			var minutes:String;			var seconds:String;			if (minutesRolled<10) {				minutes = "0"+String(minutesRolled);			} else {				minutes = String(minutesRolled);			}			if (secondsRolled<10) {				seconds = "0"+String(secondsRolled);			} else {				seconds = String(secondsRolled);			}			textBox.text = minutes+":"+seconds;		}	}}