package com.xmlphotoalbum{	import com.xmlphotoalbum.Mp3Buttons.*;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.AntiAliasType;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.media.SoundLoaderContext;	import flash.net.URLRequest;	import flash.utils.Timer;	import flash.net.URLLoader;	import flash.xml.XMLDocument;	import flash.events.ErrorEvent;	import flash.geom.Rectangle;	import flash.display.Loader;	public class Mp3Player extends MovieClip {				// track variables		public var _channel        :SoundChannel;		public var _sound          :Sound;		public var _position       :int;		public var _length         :int;		public var _loaded         :int;		public var _total          :int;		public var _currentPosition:uint;		public var _repeat         :Boolean;		public var buffer          :SoundLoaderContext;		// xml variables		private var fileLoc       :String;		private var urlLoader     :URLLoader;		private var cNodes        :Array;		private var datam         :XML;		// application variables		private var timer:Timer   = new Timer(20);		private var currentTrack  :uint;		private var isPlaying     :Boolean;		private var dragOn        :Boolean;		private var seekerBound   :Rectangle;//for track scrubber		private var volumeBound   :Rectangle;//for volume scrubber		private var isLoading     :Boolean;				// image loader		private var SoundImage:Loader 			 = new Loader();		private var container:Sprite 			 = new Sprite();		private var pictURL:String;				private var Dots:TextField               = new TextField();		private var Artist:TextField             = new TextField();		private var AlbumTitle:TextField         = new TextField();		private var SongTitle:TextField          = new TextField();		private var Year:TextField               = new TextField();		private var TrackNum:TextField           = new TextField();		private var Genre:TextField              = new TextField();		private var Comment:TextField            = new TextField();		private var SoundInfoFmt:TextFormat      = new TextFormat();		private var SoundInfoFmt2:TextFormat     = new TextFormat();		private var IDholder:Sprite              = new Sprite();		private var playerAll:Sprite 		     = new Sprite();		private var transportBar:Sprite 		 = new Sprite();		private var soundHolder:Sprite           = new Sprite();		public var backG:PlayerBackground;		public var stop_Btn:StopButton           = new StopButton();		public var ppButton:PlayButton           = new PlayButton();		public var previous_Btn:PreviousButton   = new PreviousButton();		public var next_Btn:NextButton           = new NextButton();		public var speaker:SpeakerButton         = new SpeakerButton();		public var soundBar:soundBarButton       = new soundBarButton();		public var soundKnob:soundKnobButton     = new soundKnobButton();		public var TrackerBarWidth:Number;		public var trackerBar:trackerBarButton;		public var trackerBarBg:trackerBarButton;		public var tracker:trackerButton         = new trackerButton();		public var Time:TextField                = new TextField();		public var format:TextFormat             = new TextFormat();		///////////////////////////////////////////////////////////////////////////////////				public function Mp3Player(_fileLoc:String,_whichTrack:Number,_TrackerBarWidth:Number) {			TrackerBarWidth          = _TrackerBarWidth;			trackerBar               = new trackerBarButton(0x666666,TrackerBarWidth);			trackerBarBg             = new trackerBarButton(0xffffff,TrackerBarWidth);			backG		             = new PlayerBackground(TrackerBarWidth+30);						fileLoc = _fileLoc;						var index:uint = fileLoc.indexOf(".");			var mediaName:String = fileLoc.substring(0,index)+".jpg";			soundBar.x   = 117;						this.addChild(playerAll);						playerAll.addChild(IDholder);			IDholder.addChild(Artist);			IDholder.addChild(AlbumTitle);			IDholder.addChild(SongTitle);			IDholder.addChild(TrackNum);			IDholder.addChild(Year);			IDholder.addChild(Genre);			IDholder.addChild(Comment);			IDholder.addChild(Dots);									playerAll.addChild(transportBar);			transportBar.addChild(backG);			transportBar.addChild(stop_Btn);			transportBar.addChild(ppButton);			soundHolder.addChild(speaker);			soundHolder.addChild(soundBar);			soundHolder.addChild(soundKnob);			transportBar.addChild(soundHolder);			transportBar.addChild(trackerBar);			transportBar.addChild(trackerBarBg);			transportBar.addChild(tracker);						Time.autoSize            = TextFieldAutoSize.LEFT;			format.font              = "Arial";			format.color             = 0xFFFFFF;			format.size              = 10;			Time.defaultTextFormat   = format;			Time.x                   = TrackerBarWidth-13;			Time.y                   = trackerBar.y+2;			Time.selectable          = false;						soundHolder.x            = TrackerBarWidth-180;						transportBar.addChild(Time);			playerAll.addChild(container);									// Load Cover Image///////////////////////////////////////////			pictURL = mediaName;			var pictURLReq:URLRequest = new URLRequest(pictURL);			SoundImage.load(pictURLReq);						SoundImage.contentLoaderInfo.addEventListener(Event.COMPLETE, imgLoaded); 						function imgLoaded(event:Event):void			{								container.addChild(SoundImage.content); 				container.x    = 25;				IDholder.y     = container.y + container.height;				transportBar.y = IDholder.y + IDholder.height;				playerAll.y    = stage.stageHeight-playerAll.height+25;			}						buffer = new SoundLoaderContext(5000);			// track seeker / scrubber			seekerBound = new Rectangle(tracker.x,tracker.y,trackerBar.width,0);// boundary so scrubber will stay within the tBarBg			trackerBar.addEventListener(MouseEvent.MOUSE_DOWN, trackingOn);			tracker.addEventListener(MouseEvent.MOUSE_DOWN, trackingOn);			// Create the Stop, Play and Pause buttons			ppButton.addEventListener(MouseEvent.CLICK, togglePlay);			stop_Btn.addEventListener(MouseEvent.CLICK, stopTrack);			// Starts playing on run			isLoading = true;			this.loadTrack(fileLoc,0);			// Volume Controls			volumeBound = new Rectangle(soundKnob.x,soundKnob.y,soundBar.width-4,0);// boundary so volume will stay within the vBarBg			soundBar.addEventListener(MouseEvent.MOUSE_DOWN, volumeMouseDown);			soundKnob.addEventListener(MouseEvent.MOUSE_DOWN, volumeMouseDown);			soundKnob.x = soundBar.width-4;			trackerBar.buttonMode = true;		}		public function initializeF():void {			stage.addEventListener(MouseEvent.MOUSE_UP, trackingOff);		}		private function stopTrack(evt:Event):void {			_channel.stop();			isPlaying = false;			tracker.x = 0;			Time.text = "0:00";			_currentPosition = 0;		}		// volume scrubber		private function volumeMouseDown(evt:Event):void {						soundKnob.startDrag(false,volumeBound);		}		// track scrubber		private function trackingOn(evt:Event):void {			tracker.startDrag(false,seekerBound);			dragOn = true;			//prevents accidental clicks		}		// when mouse is up after clicking any scrubber		private function trackingOff(evt:Event):void {			if (evt.target.name == "ppButton") {			} else {				tracker.stopDrag();				soundKnob.stopDrag();				if (isPlaying == true) {					if (dragOn == true) {						_channel.stop();						_channel = _sound.play(_length / 100 * ((tracker.x-tracker.width/3)/(trackerBar.width))*100);						dragOn = false;					}				} else {// if not playing					dragOn = false;					_currentPosition =Math.abs( _length / 100 * ((tracker.x-tracker.width/3)/(trackerBar.width)*100));				}			}		}				public function loadTrack(songName:String,pos:int):void {			timer.addEventListener(TimerEvent.TIMER, onTimer);			timer.start();			isPlaying = true;			var _mp3:String = songName;//mp3 is the tag name in the xml file			_sound = new Sound(new URLRequest(_mp3), buffer);			_sound.addEventListener(Event.ID3, onID3);			_channel = _sound.play(pos);		}		public function togglePlay(evt:Event):void {			// If playing, stop and save that position			if (isPlaying == true) {				_channel.stop();				isPlaying = false;				_currentPosition = _position;			} else {				// Else, start at the saved position				_channel = _sound.play(_currentPosition);				isPlaying = true;			}		}		public function onID3(event:Event):void {			// Display selected id3 tags in the text field			SoundInfoFmt.font              = "Arial";			SoundInfoFmt.color             = 0xffffff;			SoundInfoFmt.size              = 11;			Dots.defaultTextFormat         = SoundInfoFmt;			Artist.defaultTextFormat       = SoundInfoFmt;			AlbumTitle.defaultTextFormat   = SoundInfoFmt;			SongTitle.defaultTextFormat    = SoundInfoFmt;			TrackNum.defaultTextFormat     = SoundInfoFmt;			Year.defaultTextFormat         = SoundInfoFmt;			Genre.defaultTextFormat        = SoundInfoFmt;			Comment.defaultTextFormat      = SoundInfoFmt;			AlbumTitle.wordWrap  		   = true; 			Artist.wordWrap       		   = true;			SongTitle.wordWrap  		   = true;			TrackNum.wordWrap     		   = true;			Year.wordWrap         		   = true;			Genre.wordWrap        		   = true;			Comment.wordWrap      		   = true;						AlbumTitle.multiline  		   = true; 			Artist.multiline       		   = true;			SongTitle.multiline    		   = true;			TrackNum.multiline    		   = true;			Year.multiline       	       = true;			Genre.multiline        		   = true;			Comment.multiline      		   = true;						AlbumTitle.width    		  = TrackerBarWidth;			Artist.width         		  = TrackerBarWidth;			SongTitle.width    		      = TrackerBarWidth;			TrackNum.width     		      = TrackerBarWidth;			Year.width           		  = TrackerBarWidth;			Genre.width          		  = TrackerBarWidth;			Comment.width        		  = TrackerBarWidth;						Artist.x = AlbumTitle.x = SongTitle.x = TrackNum.x = Year.x = Genre.x = Comment.x = 20;									Dots.x						  = 60;			Dots.y						  = 60;			Artist.y            	      = 60;			AlbumTitle.y          	      = 75;			SongTitle.y            		  = 90;			TrackNum.y                    = 105;			Year.y                        = 120;			Genre.y                       = 135;			Comment.y                     = 160;			if (_sound.id3.artist == null || _sound.id3.artist == "") {				Artist.text = "Artist  : " + "Unknown Artist";			} else {				Artist.text = "Artist  : " + _sound.id3.artist;			}			if (_sound.id3.album == null || _sound.id3.album == "") {				AlbumTitle.text = "Album : " + "Unknown Album";			} else {				AlbumTitle.text = "Album : " + _sound.id3.album;			}			if (_sound.id3.songName == null || _sound.id3.songName == "") {				SongTitle.text = "Title    : " + "Unknown Song Title";			} else {				SongTitle.text = "Title    : " + _sound.id3.songName;			}			if (_sound.id3.track  == null || _sound.id3.track  == "") {				TrackNum.text = "Track  : " + "Unknown Track No";			} else {				TrackNum.text = "Track  : " + _sound.id3.track ;			}			if (_sound.id3.genre   == null || _sound.id3.genre   == "") {				Genre.text = "Genre  : " + "Unknown Genre";			} else {				Genre.text = "Genre  : " + _sound.id3.genre  ;			}			if (_sound.id3.year   == null || _sound.id3.year   == "") {				Year.text = "Year    : " + "Unknown Year";			} else {				Year.text = "Year    : " + _sound.id3.year  ;			}			if (_sound.id3.comment   == null || _sound.id3.comment   == "") {				Comment.text = "";			} else {				Comment.text = ""  + _sound.id3.comment + "" ;			}		}		private function onTimer(event:TimerEvent):void {			_channel.soundTransform = new SoundTransform(soundKnob.x / (soundBar.width-soundKnob.width));			_loaded = _sound.bytesLoaded;// loaded bytes			_total  = _sound.bytesTotal;// total bytes			_length = _sound.length;// total _length of track in miliseconds			// show loading %			if (_loaded < _total) {				Time.text = Math.floor(_loaded / _total *100).toString() + "%";				isLoading = true;			} else {								isLoading = false;			}			if (_total > 0) {// if mp3 is successfully loaded				trackerBarBg.width = TrackerBarWidth * _loaded / _total;				seekerBound        = new Rectangle(0,0,trackerBar.width+2,0);// boundary so scrubber will stay within the tBarBg				_position          = _channel.position;// current position off track in miliseconds								if (dragOn == true) {					_position = _length * tracker.x / (trackerBar.width);					updateTimeDisplay();				} else {					if (isPlaying == false) {					} else {						tracker.x = ((trackerBar.width+4)/100) * (_position / _length*100);						updateTimeDisplay();					}				}				//end of track				if (dragOn == true) {				} else {					if (isLoading == false) {						if ((_position / 1000) >=(_length / 1000) && isPlaying == true) {							if (_repeat == true) {								_channel.stop();								loadTrack(fileLoc,0);							} else {																_channel.stop();							}						}					}				}			} else {				isLoading = true;				Time.text = "Buffering...";			}		}		private function updateTimeDisplay() {			var minutes:Number = Math.floor(_position / 1000) / 60 >> 0;			var seconds:Number = Math.floor(_position / 1000) % 60 >> 0;			// track time display			if ( seconds >= 0 && seconds < 10) {				Time.text = minutes.toString() + ":0" + seconds.toString();			} else {				Time.text = minutes.toString() + ":" + seconds.toString();			}		}	}}