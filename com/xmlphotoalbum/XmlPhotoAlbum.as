/*** ...* @author Default* @version 0.1*/package com.xmlphotoalbum{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IEventDispatcher;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.net.URLRequest;	import flash.media.SoundMixer;	import flash.text.*;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.utils.Timer;	import flash.events.TimerEvent;	import caurina.transitions.Tweener;	import fl.motion.easing.*;	import fl.transitions.*;	import fl.transitions.easing.*;	import flash.events.*;	import flash.net.*;	import flash.display.Shape;	import flash.display.LineScaleMode;	import flash.display.CapsStyle;	import flash.display.JointStyle;	import com.xmlphotoalbum.Mp3Buttons.*;	public class XmlPhotoAlbum extends MovieClip {		private var MainMenuBox:Sprite = new Sprite();		private var GalleryBox:Sprite = new Sprite();		private var GalleryText:TextField= new TextField();		private var GalleryInitiate:Number=0;		private var ThumbnailBox:Sprite = new Sprite();		private var ThumbnailText:TextField= new TextField();		private var PauseBox:Sprite = new Sprite();		private var PauseText:TextField= new TextField();		private var PauseFlag:Boolean=false;		private var ProgressBox:Sprite = new Sprite();		private var ProgressText:TextField= new TextField();		private var NavigationButtons:Sprite = new Sprite();		private var nextBtn:DrawNavigationButtons=new DrawNavigationButtons(30,30,0x000000,0.6);		private var previousBtn:DrawNavigationButtons=new DrawNavigationButtons(30,30,0x000000,0.6);		public var backgroundRect:Shape;		public var backgroundTransparency:Number;		public var strokeColor:uint;		public var backgroundStrokeSize:uint;		public var backgroundColor:uint;		private var progressText:TextField= new TextField();		public var format:TextFormat  = new TextFormat();		private var progressRect:Shape;		private var CaptionBox:Sprite = new Sprite();		private var progressBox:Sprite = new Sprite();		private var captionFlag:Boolean=false;		public var backgroundWidth:Number;		public var backgroundHeight:Number;		public var ImageWidth:Number;		public var ImageHeight:Number;		public var PhotoLink:String;		private var initializeSlide:Number=0;		private var albumID:Number=0;		private var slideTextKey:Number=1;		private var timer:Timer;		private var slideBitmap:Bitmap;		private var tempPhotoIndex:Number=0;		private var mySlideShow:SlideShow;		private var mySlideShow2:SlideShow;		private var slideMovieClipA:MovieClip;		private var slideMovieClipB:MovieClip;		private var aSits:Boolean=false;		private var difX:Number;		private var difY:Number;		private var available:Boolean;		private var SlideXMLPath:String;		private var SlideXML:XML = new XML();		private var slideFlag:Boolean=true;		private var transitionTime:Number;		private var myT:Thumbs;		private var myAlbums:Albums;		private var noofRowsThumbs:Number;		private var noofColumnsThumbs:Number;		private var myVideo:Videoplayer;		private var videoActive:Boolean=false;		private var mySound:Mp3Player;		private var soundActive:Boolean=false;		private var multimediaActive:Boolean=false;		private var _thumbsatStartUp:Boolean;		private var _albumsatStartUp:Boolean;				//		//Language Settings		private var _skinColor:uint;		private var _albumsText:String;		private var _thumbnailsText:String;		private var _playText:String;		private var _pauseText:String;		public function XmlPhotoAlbum() {			var configXMLString:String="data/config.xml";			var configURLRequest:URLRequest=new URLRequest(configXMLString);			var configLoader:URLLoader = new URLLoader();			configLoader.load(configURLRequest);			configLoader.addEventListener(Event.COMPLETE, initiate);		}		///////SlideShow Input Values are taken from CONFIG.XML///////////////////////////////////////////////////////////////		//////& Default Values////////////////////////////////////////		public function initiate(event:Event):void {			var _xml:XML=XML(event.target.data);			var configXML:XML = new XML();			configXML=XML(event.target.data);			var _xmlString:String;			var _slideTime:Number;			var _transitionTime:Number;			var _xPos:Number;			var _yPos:Number;			var _backgroundWidth:Number;			var _backgroundHeight:Number;			var _backgroundColor:uint;			var _backgroundTransparency:Number;			var _backgroundStroke:Boolean;			var _strokeColor:uint;			var _backgroundStrokeSize:uint;			var _captionFont:String;			var _captionColor:uint;			var _captionSize:Number;			var _caption_Xpos:Number;			var _caption_Ypos:Number;			var _shrinkToSize:Boolean;			var _enlargeToSize:Boolean;			var _noofRowsThumbs:Number;			var _noofColumnsThumbs:Number;			if (configXML.xmlLink=="") {				_xmlString="data/slideshow.xml";			} else {				_xmlString=configXML.xmlLink;			}			if (configXML.slideTime=="") {				_slideTime=4;			} else {				_slideTime=configXML.slideTime;			}			if (configXML.transitionTime=="") {				_transitionTime=2;			} else {				_transitionTime=configXML.transitionTime;			}			if (configXML.xPos=="") {				_xPos=0;			} else {				_xPos=configXML.xPos;			}			if (configXML.yPos=="") {				_yPos=0;			} else {				_yPos=configXML.yPos;			}			if (configXML.backgroundWidth=="") {				_backgroundWidth=300;			} else {				_backgroundWidth=configXML.backgroundWidth;			}			if (configXML.backgroundHeight=="") {				_backgroundHeight=200;			} else {				_backgroundHeight=configXML.backgroundHeight;			}			if (configXML.backgroundColor=="") {				_backgroundColor=0x000000;			} else {				_backgroundColor=configXML.backgroundColor;			}			if (configXML.backgroundTransparency=="") {				_backgroundTransparency=1;			} else {				_backgroundTransparency=configXML.backgroundTransparency;			}			if (configXML.backgroundStroke=="") {				_backgroundStroke=true;			} else {				_backgroundStroke=configXML.backgroundStroke;			}			if (configXML.strokeColor=="") {				_strokeColor=0x333333;			} else {				_strokeColor=configXML.strokeColor;			}			if (configXML.backgroundStrokeSize=="") {				_backgroundStrokeSize=2;			} else {				_backgroundStrokeSize=configXML.backgroundStrokeSize;			}			if (configXML.skinColor=="") {				_skinColor=0x000000;			} else {				_skinColor=configXML.skinColor;			}			if (configXML.captionFont=="") {				_captionFont="Tahoma";			} else {				_captionFont=configXML.captionFont;			}			if (configXML.captionColor=="") {				_captionColor=0xFFFFFF;			} else {				_captionColor=configXML.captionColor;			}			if (configXML.captionSize=="") {				_captionSize=9;			} else {				_captionSize=configXML.captionSize;			}			if (configXML.caption_Xpos=="") {				_caption_Xpos=5;			} else {				_caption_Xpos=configXML.caption_Xpos;			}			if (configXML.caption_Ypos=="") {				_caption_Ypos=_backgroundHeight-25;			} else {				_caption_Ypos=configXML.caption_Ypos;			}			if (configXML.shrinkToSize=="") {				_shrinkToSize=true;			} else {				_shrinkToSize=configXML.shrinkToSize;			}			if (configXML.enlargeToSize=="") {				_enlargeToSize=true;			} else {				_enlargeToSize=configXML.enlargeToSize;			}			if (configXML.noofRowsThumbs=="") {				_noofRowsThumbs=6;			} else {				_noofRowsThumbs=configXML.noofRowsThumbs;			}			if (configXML.noofColumnsThumbs=="") {				_noofColumnsThumbs=8;			} else {				_noofColumnsThumbs=configXML.noofColumnsThumbs;			}			if (configXML.albumsatStartUp=="") {				_albumsatStartUp=false;			} else {				if (configXML.albumsatStartUp=="false") {					_albumsatStartUp=false;				} else {					_albumsatStartUp=true;				}			}			if (! _albumsatStartUp) {				if (configXML.thumbsatStartUp=="") {					_thumbsatStartUp=false;				} else {					if (configXML.thumbsatStartUp=="false") {						_thumbsatStartUp=false;					} else {						_thumbsatStartUp=true;					}				}			}						if (configXML.albumsText=="") {				_albumsText="ALBUMS";			} else {				_albumsText=configXML.albumsText;			}						if (configXML.thumbnailsText=="") {				_thumbnailsText="THUMBNAILS";			} else {				_thumbnailsText=configXML.thumbnailsText;			}						if (configXML.playText=="") {				_playText="PLAY";			} else {				_playText=configXML.playText;			}						if (configXML.pauseText=="") {				_pauseText="PAUSE";			} else {				_pauseText=configXML.pauseText;			}						////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			this.x=_xPos;			this.y=_yPos;			backgroundWidth=_backgroundWidth;			backgroundHeight=_backgroundHeight;			noofRowsThumbs=_noofRowsThumbs;			noofColumnsThumbs=_noofColumnsThumbs;			var durationSec:Number=_slideTime*1000;			timer=new Timer(durationSec);			transitionTime=_transitionTime;			SlideXMLPath=_xmlString;			var SlideURLRequest:URLRequest=new URLRequest(SlideXMLPath);			var SlideLoader:URLLoader = new URLLoader();			SlideLoader.load(SlideURLRequest);			SlideLoader.addEventListener(Event.COMPLETE, completeHandler);			backgroundTransparency=_backgroundTransparency;			strokeColor=_strokeColor;			backgroundStrokeSize=_backgroundStrokeSize;			backgroundColor=_backgroundColor;			format.font=_captionFont;			format.color=_captionColor;			format.size=_captionSize;			progressText.y=_caption_Ypos-backgroundStrokeSize;			progressText.x=_caption_Xpos;		}		private function drawBackground():void {			backgroundRect = new Shape();			backgroundRect.graphics.beginFill(backgroundColor,backgroundTransparency);			backgroundRect.graphics.lineStyle(backgroundStrokeSize, strokeColor, 1, false, LineScaleMode.VERTICAL,CapsStyle.NONE, JointStyle.MITER, 10);			backgroundRect.graphics.drawRect(0, 0, backgroundWidth, backgroundHeight);			backgroundRect.graphics.endFill();			this.addChild(backgroundRect);			var square:Sprite = new Sprite();			square.graphics.beginFill(0xFF0000);			square.graphics.drawRect(0, 0, backgroundWidth, backgroundHeight);			this.addChild(NavigationButtons);			/////////////////////////////////////////NAvigation Buttons are Added here//////////////////////////////////////////////////////////			this.addChild(square);			previousBtn.scaleX=-1;			NavigationButtons.addChild(previousBtn);			NavigationButtons.addChild(nextBtn);			previousBtn.alpha=0;			nextBtn.alpha=0;			this.addEventListener(MouseEvent.MOUSE_OVER,captionCall);			this.addEventListener(MouseEvent.MOUSE_OVER, navigationBtnCall);			this.addEventListener(MouseEvent.MOUSE_OUT,captionLeave);			this.addEventListener(MouseEvent.MOUSE_MOVE,checkMouse);			this.mask=square;		}		private function completeHandler(event:Event) {			this.drawBackground();			SlideXML=XML(event.target.data);			stage.addEventListener("saveme",saveImage);			progressText.autoSize=TextFieldAutoSize.LEFT;			progressText.defaultTextFormat=format;			progressText.text=SlideXML.album[albumID].media[0].attribute("caption");			/////////////////////////////////////////////////////TExt REctangles/////////////////////////////////////////////////////////////			progressRect = new Shape();			progressRect.graphics.beginFill(0x000000, 0.4);			progressRect.graphics.drawRect(0, progressText.y, 5 + progressText.width, progressText.height);			progressRect.graphics.endFill();			/*this.MainMenu();			this.playMediaPlayer();*/			if (!_albumsatStartUp) {				if (_thumbsatStartUp) {					CreateThumbs(null);				} else {					this.MainMenu();					this.playMediaPlayer();									}			}			if (_albumsatStartUp) {				CreateAlbums(null);			} else {				this.MainMenu();				this.playMediaPlayer();			}		}				private function saveImage(event:Event):void{						var folderName:String = SlideXML.album[albumID].attribute("folder");			var urlLink:String = ("media/"+folderName+"/originals/"+SlideXML.album[albumID].media[initializeSlide]);			var urlLinkRequest:URLRequest = new URLRequest(urlLink);			navigateToURL(urlLinkRequest,"_blank");					}						private function playMediaPlayerR(event:TimerEvent):void {			var slideLen:uint=SlideXML.album[albumID].media.length();			initializeSlide++;			initializeSlide=initializeSlide%slideLen;			this.playMediaPlayer();		}		private function playMediaPlayer():void {			timer.stop();			if (videoActive) {				this.removeChild(myVideo);				myVideo.ns.close();				videoActive=false;			} else {				this.addChild(CaptionBox);				CaptionBox.x=- progressText.width-5;				CaptionBox.addChild(progressBox);				progressBox.addChild(progressRect);				CaptionBox.addChild(progressText);			}			if (soundActive) {				SoundMixer.stopAll();				this.removeChild(mySound);				soundActive=false;			} else {				this.addChild(CaptionBox);				CaptionBox.x=- progressText.width-5;				CaptionBox.addChild(progressBox);				progressBox.addChild(progressRect);				CaptionBox.addChild(progressText);			}			progressText.text=SlideXML.album[albumID].media[initializeSlide].attribute("caption");			progressBox.width=5+progressText.width;			CaptionBox.x=- progressText.width-5;			Tweener.addTween(CaptionBox, {x:0, time:transitionTime});			captionFlag=true;			var folderName:String=SlideXML.album[albumID].attribute("folder");			var medianame:String="media/"+folderName+"/"+SlideXML.album[albumID].media[initializeSlide];			var index:uint=medianame.indexOf(".")+1;			var medianameLength:uint=medianame.length;			var endIndex:uint=medianameLength;			var mediatype:String=medianame.substring(index,endIndex);			switch (mediatype) {				case "jpg" :					this.callSlideShow();					break;				case "flv" :					this.callVideoPlayer();					break;				case "mp3" :					this.callSoundPlayer();					break;				default :					trace("Not supported");			}			timer.addEventListener(TimerEvent.TIMER,playMediaPlayerR);		}		private function slideLoaded(event:Event):void {						timer.start();		}				private function callSlideShow():void {			var folderName:String=SlideXML.album[albumID].attribute("folder");			var slideURLString:String="media/"+folderName+"/previews/"+SlideXML.album[albumID].media[initializeSlide];			timer.stop();			if (! aSits) {				mySlideShow=new SlideShow(folderName,slideURLString,backgroundWidth,backgroundHeight);				mySlideShow.alpha=0;				this.addChildAt(mySlideShow,1);				mySlideShow.addEventListener("image loaded",slideLoaded);								Tweener.addTween(mySlideShow, {alpha:1, time:transitionTime});				aSits=true;				if (mySlideShow2!=null) {					Tweener.addTween(mySlideShow2, {alpha:0, time:transitionTime, onComplete:slideDispose2});				}			} else {				mySlideShow2=new SlideShow(folderName,slideURLString,backgroundWidth,backgroundHeight);				mySlideShow2.alpha=0;				this.addChildAt(mySlideShow2,1);				mySlideShow2.addEventListener("image loaded",slideLoaded);								Tweener.addTween(mySlideShow2, {alpha:1, time:transitionTime});				aSits=false;				if (mySlideShow!=null) {					Tweener.addTween(mySlideShow, {alpha:0, time:transitionTime, onComplete:slideDispose});				}			}			multimediaActive=false;			videoActive=false;			soundActive=false;		}		private function callVideoPlayer():void {			if (! aSits) {				aSits=true;				if (mySlideShow2!=null) {					Tweener.addTween(mySlideShow2, {alpha:0, time:transitionTime, onComplete:slideDispose2});				}			} else {				aSits=false;				if (mySlideShow!=null) {					Tweener.addTween(mySlideShow, {alpha:0, time:transitionTime, onComplete:slideDispose});				}			}			aSits=false;			timer.stop();			var folderName:String=SlideXML.album[albumID].attribute("folder");			var videoURLString:String="media/"+folderName+"/previews/"+SlideXML.album[albumID].media[initializeSlide];			myVideo=new Videoplayer(videoURLString);			this.addChildAt(myVideo,1);			videoActive=true;			multimediaActive=true;			//this.removeChild(CaptionBox);			var videoWidth:Number=myVideo.width;			var videoHeight:Number=myVideo.height;			var videoX:Number = (backgroundWidth-videoWidth)/2;			var videoY:Number = (backgroundHeight-videoHeight)/2;			myVideo.x=videoX;			myVideo.y=videoY;		}		private function callSoundPlayer():void {			if (! aSits) {				aSits=true;				if (mySlideShow2!=null) {					Tweener.addTween(mySlideShow2, {alpha:0, time:transitionTime, onComplete:slideDispose2});				}			} else {				aSits=false;				if (mySlideShow!=null) {					Tweener.addTween(mySlideShow, {alpha:0, time:transitionTime, onComplete:slideDispose});				}			}			aSits=false;			timer.stop();			var folderName:String=SlideXML.album[albumID].attribute("folder");			var songURLString:String="media/"+folderName+"/previews/"+SlideXML.album[albumID].media[initializeSlide];			mySound=new Mp3Player(songURLString,0,stage.stageWidth-30);			this.addChildAt(mySound,1);			soundActive=true;			multimediaActive=true;			mySound.initializeF();		}		private function slideDispose():void {			mySlideShow.slideBitmapA.bitmapData.dispose();			this.removeChild(mySlideShow);		}		private function slideDispose2():void {			mySlideShow2.slideBitmapA.bitmapData.dispose();			this.removeChild(mySlideShow2);		}		private function downloadCall(event:MouseEvent):void {			//trace("88");		}		private function captionCall(event:MouseEvent):void {			Tweener.addTween(CaptionBox, {x:0, time:transitionTime});			captionFlag=true;		}		private function captionLeave(event:MouseEvent):void {			Tweener.addTween(nextBtn, {time:3,alpha:0 });			Tweener.addTween(previousBtn, {time:3,alpha:0 });			Tweener.addTween(CaptionBox, {time:transitionTime,x: -progressText.width-5});			captionFlag=false;		}		private function navigationBtnCall(event:MouseEvent):void {			previousBtn.x=30+backgroundStrokeSize;			previousBtn.y=backgroundHeight/2-nextBtn.height/2;			nextBtn.x=backgroundWidth-30-backgroundStrokeSize;			nextBtn.y=backgroundHeight/2-nextBtn.height/2;			Tweener.addTween(nextBtn, {time:2,alpha:1 });			Tweener.addTween(previousBtn, {time:2,alpha:1 });			nextBtn.addEventListener(MouseEvent.CLICK, NextImage);			nextBtn.addEventListener(MouseEvent.CLICK, PauseSlideShow);			previousBtn.addEventListener(MouseEvent.CLICK, PrevImage);			previousBtn.addEventListener(MouseEvent.CLICK, PauseSlideShow);			nextBtn.buttonMode=true;			previousBtn.buttonMode=true;		}		private function NextImage(event:MouseEvent):void {			//this.MainMenuCall();			if (! multimediaActive) {				if (! aSits) {					this.slideDispose2();					aSits=true;				} else {					this.slideDispose();					aSits=false;				}			}			timer.stop();			PauseText.text=_pauseText;			PauseFlag=false;			initializeSlide++;			initializeSlide=initializeSlide%SlideXML.album[albumID].media.length();			progressText.text=SlideXML.album[albumID].media[initializeSlide].attribute("caption");			progressBox.width=5+progressText.width;			if (captionFlag) {				//////////////////////////////////////////Caption Movements////////////////////////////////////////////////////////////////				CaptionBox.x=- progressText.width-5;				Tweener.addTween(CaptionBox, {time:transitionTime,x:0});			} else {				CaptionBox.x=- progressText.width-5;			}			this.playMediaPlayer();		}		private function PrevImage(event:MouseEvent):void {			//this.MainMenuCall();			if (! multimediaActive) {				if (! aSits) {					this.slideDispose2();					aSits=true;				} else {					this.slideDispose();					aSits=false;				}			}			timer.stop();			PauseText.text=_pauseText;			PauseFlag=false;			initializeSlide--;			if (initializeSlide<0) {				initializeSlide=SlideXML.album[albumID].media.length()-initializeSlide-2;			}			playMediaPlayer();			progressText.text=SlideXML.album[albumID].media[initializeSlide].attribute("caption");			progressBox.width=5+progressText.width;			if (captionFlag) {				//////////////////////////////////////////Caption Movements////////////////////////////////////////////////////////////////				CaptionBox.x=- progressText.width-5;				Tweener.addTween(CaptionBox, {time:transitionTime, x:0 });			} else {				CaptionBox.x=- progressText.width-5;			}		}		///////////////////////////////////////////////////////////NAVIGATION MENU////////////////////////////////////////////////////////////		private function MainMenu():void {			var buttonMargin:Number=1;			var buttonOffset:Number=5;			this.addChild(MainMenuBox);			MainMenuBox.y=-50;			var MainMenuRect:Shape = new Shape();			MainMenuRect.graphics.beginFill(0x000000, 0.4);			MainMenuRect.graphics.drawRect(0, 0, backgroundWidth, 50);			MainMenuRect.graphics.endFill();			MainMenuBox.addChild(MainMenuRect);			//////////////////////////////////////////Gallery Button//////////////////////////////////////////////////////////////////////////////			MainMenuBox.addChild(GalleryBox);			MainMenuBox.addChild(ThumbnailBox);			MainMenuBox.addChild(PauseBox);			GalleryBox.addChild(GalleryText);			GalleryBox.buttonMode=true;			GalleryBox.mouseChildren=false;			GalleryBox.addEventListener(MouseEvent.CLICK, CreateAlbums);			GalleryText.autoSize=TextFieldAutoSize.LEFT;			GalleryText.defaultTextFormat=format;			GalleryText.background=true;			GalleryText.backgroundColor=0x000000;			GalleryText.text=_albumsText;			GalleryText.y=buttonMargin;			//////////////////////////////////////////Thumbnail Button//////////////////////////////////////////////////////////////////////////////			ThumbnailBox.addChild(ThumbnailText);			ThumbnailBox.buttonMode=true;			ThumbnailBox.mouseChildren=false;			ThumbnailBox.addEventListener(MouseEvent.CLICK, CreateThumbs);			ThumbnailText.y=buttonOffset+buttonMargin+GalleryText.textHeight;			ThumbnailText.autoSize=TextFieldAutoSize.LEFT;			ThumbnailText.defaultTextFormat=format;			ThumbnailText.background=true;			ThumbnailText.backgroundColor=0x000000;			ThumbnailText.text=_thumbnailsText;			//////////////////////////////////////////Pause Button//////////////////////////////////////////////////////////////////////////////			PauseBox.addChild(PauseText);			PauseBox.buttonMode=true;			PauseBox.mouseChildren=false;			PauseBox.addEventListener(MouseEvent.CLICK, PauseSlideShow);			PauseText.y = 2 * buttonOffset+buttonMargin+GalleryText.textHeight*2;			PauseText.autoSize=TextFieldAutoSize.LEFT;			PauseText.defaultTextFormat=format;			PauseText.background=true;			PauseText.backgroundColor=0x000000;			PauseText.text=_pauseText;			ProgressText.autoSize=TextFieldAutoSize.LEFT;			ProgressText.defaultTextFormat=format;			ProgressText.background=true;			ProgressText.backgroundColor=0x000000;		}		private function PauseSlideShow(event:MouseEvent):void {			if (PauseFlag) {				timer.start();				PauseText.text=_pauseText;				PauseFlag=false;			} else {				timer.stop();				PauseText.text=_playText;				PauseFlag=true;			}		}		private function checkMouse(event:MouseEvent):void {			if ((this.mouseX>0)&&(this.mouseX<backgroundWidth)&&((this.mouseY>0)&&(this.mouseY<40))) {				this.MainMenuCall();			} else {				this.MainMenuLeave();			}		}		private function MainMenuCall():void {			Tweener.addTween(MainMenuBox, {time:2, y:0 });		}		private function MainMenuLeave():void {			Tweener.addTween(MainMenuBox, {time:1.5,y:-50});		}		private function CreateAlbums(event:MouseEvent):void {			Tweener.addTween(MainMenuBox, {time:1.5,y:-50});			this.removeEventListener(MouseEvent.MOUSE_OVER,captionCall);			this.removeEventListener(MouseEvent.MOUSE_OVER, navigationBtnCall);			this.removeEventListener(MouseEvent.MOUSE_OUT,captionLeave);			this.removeEventListener(MouseEvent.MOUSE_MOVE,checkMouse);						timer.stop();			PauseText.text=_playText;			PauseFlag=true;			myAlbums=new Albums(SlideXML,backgroundWidth,backgroundHeight,noofColumnsThumbs,noofRowsThumbs,_skinColor);			myAlbums.y=- backgroundHeight;			Tweener.addTween(myAlbums, {time:1, y:0, onStart:hideAway });			this.addChild(myAlbums);			myAlbums.addEventListener("showAlbum",showAlbum);		}		private function CreateThumbs(event:MouseEvent):void {						Tweener.addTween(MainMenuBox, {time:1.5,y:-50});			this.removeEventListener(MouseEvent.MOUSE_OVER,captionCall);			this.removeEventListener(MouseEvent.MOUSE_OVER, navigationBtnCall);			this.removeEventListener(MouseEvent.MOUSE_OUT,captionLeave);			this.removeEventListener(MouseEvent.MOUSE_MOVE,checkMouse);						timer.stop();			PauseText.text=_playText;			PauseFlag=true;			ProgressText.text="CREATING THUMBNAILS";			this.addChild(ProgressText);			ProgressText.x = 0.5*(backgroundWidth-ProgressText.width);			ProgressText.y=-100;			Tweener.addTween(ProgressText, {time:1, y:backgroundHeight/2, transition:"easeInOutElastic" });			var folderName:String=SlideXML.album[albumID].attribute("folder");			myT=new Thumbs(folderName,albumID,backgroundWidth,backgroundHeight);			myT.y=- backgroundHeight;			Tweener.addTween(myT, {time:1, y:0, onStart:hideAway });			this.addChild(myT);			myT.addEventListener("showSlide",showSlide);		}		private function hideAway():void {			this.removeChild(ProgressText);		}		private function showSlide(event:Event):void {						this.addEventListener(MouseEvent.MOUSE_OVER,captionCall);			this.addEventListener(MouseEvent.MOUSE_OVER, navigationBtnCall);			this.addEventListener(MouseEvent.MOUSE_OUT,captionLeave);			this.addEventListener(MouseEvent.MOUSE_MOVE,checkMouse);						timer.start();			PauseText.text=_pauseText;			PauseFlag=false;			initializeSlide=event.target.imageID;			Tweener.addTween(myT, {time:1, y:-backgroundHeight, onComplete:RemoveThumbs });			function RemoveThumbs():void {				playMediaPlayer();				this.removeChild(myT);			}		}		private function showAlbum(event:Event):void {						Tweener.addTween(myAlbums, {time:0.5, y:2*backgroundHeight, onComplete:RemoveAlbum });			function RemoveAlbum():void {				this.removeChild(myAlbums);			}			timer.start();			PauseText.text=_pauseText;			PauseFlag=false;			initializeSlide=0;			albumID=event.target.xmlID;			this.MainMenu();			CreateThumbs(null);		}	}}